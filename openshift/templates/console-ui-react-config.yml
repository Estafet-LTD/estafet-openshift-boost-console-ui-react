apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: console-ui-react-config
parameters:
- description: Defines the namespace within which these objects are deployed
  name: NAMESPACE
  required: true
- description: Defines name of the microservice
  name: MICROSERVICE
  value: console-ui-react
  required: true
- description: Defines max memory
  name: MAX_MEMORY
  value: 600Mi
  required: true
- description: Defines min memory
  name: MIN_MEMORY
  value: 100Mi
  required: true
- description: Defines the namespace for the image stream
  name: DOCKER_NAMESPACE
  required: true
- description: Defines docker registry
  name: DOCKER_REGISTRY
  value: docker-registry.default.svc:5000
  required: true
- description: Defines docker registry
  name: DOCKER_IMAGE_LABEL
  required: true
- description: Defines the product that this template is related to
  name: PRODUCT
  required: true
- description: Defines the product description that this template is related to
  name: PRODUCT_DESCRIPTION
  required: true
- description: Defines the host Openshift is running on
  name: OPENSHIFT_HOST
  required: true
- description: Defines the tasks manager title
  name: TASK_MANAGEMENT_TITLE
  required: true
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      app: ${MICROSERVICE}
      product: ${PRODUCT}
    name: ${MICROSERVICE}
    namespace: ${NAMESPACE}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: ${MICROSERVICE}
      deploymentconfig: ${MICROSERVICE}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${MICROSERVICE}
          deploymentconfig: ${MICROSERVICE}
      spec:
        containers:
          - env:
            - name: PRODUCT
              value: ${PRODUCT}
            - name: PRODUCT_DESCRIPTION
              value: ${PRODUCT_DESCRIPTION}
            - name: TASK_MANAGEMENT_TITLE
              value: ${TASK_MANAGEMENT_TITLE}
            - name: GATEWAY_API_SERVICE_URI
              value: 'http://console-gateway-api-${NAMESPACE}.${OPENSHIFT_HOST}'
            image: ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${MICROSERVICE}:${DOCKER_IMAGE_LABEL}
            imagePullPolicy: Always
            name: ${MICROSERVICE}
            ports:
              - containerPort: 8778
                protocol: TCP
              - containerPort: 8080
                protocol: TCP
              - containerPort: 8443
                protocol: TCP
            readinessProbe:
              failureThreshold: 10
              initialDelaySeconds: 30
              periodSeconds: 60
              successThreshold: 1
              timeoutSeconds: 1
              httpGet:
                path: /api/health
                port: 8080
                scheme: HTTP
            resources:
              limits:
                cpu: '1'
                memory: ${MAX_MEMORY}
              requests:
                cpu: 50m
                memory: ${MIN_MEMORY}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
            - ${MICROSERVICE}
          from:
            kind: ImageStreamTag
            name: "${MICROSERVICE}:${DOCKER_IMAGE_LABEL}"
            namespace: ${DOCKER_NAMESPACE}
        type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: ${MICROSERVICE}
      product: ${PRODUCT}
    name: ${MICROSERVICE}
    namespace: ${NAMESPACE}
  spec:
    ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      - name: 8443-tcp
        port: 8443
        protocol: TCP
        targetPort: 8443
      - name: 8778-tcp
        port: 8778
        protocol: TCP
        targetPort: 8778
    selector:
      app: ${MICROSERVICE}
      deploymentconfig: ${MICROSERVICE}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
